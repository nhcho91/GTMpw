function [C, alpha0, dC, C1, C2] = piecewise
% Piece-wise defined, longitudinal aerodynamic coefficients of the GTM
% identified by the pwpfit toolbox.
%
%% Usage and description
%
%   [C, alpha', dC, Cpre, Cpost] = piecewise
%
% Returns the piece-wise polynomial model of the longitudinal aerodynamic
% coefficients:
%
% * |C|      -- piece-wise defined polynomial model;
% * |alpha'| -- low-angle of attack boundary;
% * |dC|     -- partial derivatives of the piece-wise model;
% * |Cpre|   -- low-angle of attack polynomial model;
% * |Cpost|  -- high-angle of attack polynomial model;
%
% All models are structs with fields |lift|, |drag|, and |m| representing
% the lift, drag, and pitch-moment coefficient, respectively. 
%
%% About
%
% * Author:     Torbjoern Cunis
% * Email:      <mailto:torbjoern.cunis@onera.fr>
% * Created:    2017-02-22
% * Changed:    2018-05-18
%
% This file is part of GTMpw -- Piece-wise polynomial model of the GTM
% published under the GNU General Public License v3.
%
%% Variables, constants, and their units
%
% * |alpha|  :  angle of attack,                                rad
% * |eta|    :  elevator deflection,                            rad
% * |Cdrag|    :  aerodynamic drag coefficient,                 -
% * |Clift|    :  aerodynamic lift coefficient,                 -
% * |Cm|       :  aerodynamic coefficient moment body y-axis,   -
% * |qhat|     :  normalized pitch rate, body y-axis            rad
%%

ift = @(c, t, e) t.*c + e.*(1-c);

% Pre-post stall boundary
alpha0 = 2.9032e-1;


%% Sub-functions in alpha
% in pre- and post-stall
% with respect to angle of attack
Clift.alpha1 = @(alpha) 1.6745e-2 + 5.2336e0.*alpha + 1.9847e0.*alpha.^2 - 3.0060e1 .*alpha.^3;
Clift.alpha2 = @(alpha) 2.7943e-1 + 3.2508e0.*alpha - 3.2349e0.*alpha.^2 + 7.0801e-1.*alpha.^3;

Cdrag.alpha1 = @(alpha)  2.9041e-2 - 1.1014e-1.*alpha + 2.3635e0 .*alpha.^2 + 3.9476e0 .*alpha.^3;
Cdrag.alpha2 = @(alpha) -1.7014e-1 + 1.4271e0 .*alpha + 7.1896e-1.*alpha.^2 - 4.8614e-1.*alpha.^3;

% Cm continuous in alpha
% UNUSED
Cm.alpha     = @(alpha)  1.9371e-1 - 2.2514e0 .*alpha + 1.7200e0 .*alpha.^2 - 6.5283e-1.*alpha.^3;

% Cm piece-wise in alpha
Cm.alpha1    = @(alpha)  1.1691e-1 - 1.4748e0 .*alpha + 8.4752e0 .*alpha.^2 - 3.2729e1 .*alpha.^3;
Cm.alpha2    = @(alpha)  1.4421e-1 - 2.4557e0 .*alpha + 2.3038e0 .*alpha.^2 - 9.4998e-1.*alpha.^3;

%% Continous functions in alpha, eta
% with respect to angle of attack and elevator deflection
% Clift.eta = @(alpha, eta)  9.2308e-3           - 6.7311e-2.*alpha      + 4.2230e-1.*eta     ...
%                          + 2.7737e-2.*alpha.^2 - 3.1187e-1.*alpha.*eta + 6.3358e-2.*eta.^2;

Clift.eta = @(alpha, eta) -4.9641e-4           + 3.2851e-3.*alpha      + 5.2091e-1.*eta     ...
                         - 7.2395e-2.*alpha.^2 - 4.1599e-1.*alpha.*eta + 8.8707e-2.*eta.^2  ...
                         + 5.0690e-2.*alpha.^3                         - 4.7866e-1.*eta.^3  ...
                         + 3.8677e-2.*alpha.^2.*eta             - 2.9293e-1.*alpha.*eta.^2; 


                    
Cdrag.eta = @(alpha, eta) -9.2206e-4           + 3.1273e-2.*alpha      + 3.4035e-2.*eta     ...
                         - 6.3981e-2.*alpha.^2 + 1.3701e-1.*alpha.*eta + 5.9390e-2.*eta.^2;
                    
% Cm.eta    = @(alpha, eta)  1.0678e-2           + 3.6018e-2.*alpha      - 1.6695e0 .*eta     ...
%                          - 1.8452e-2.*alpha.^2 + 1.0020e0 .*alpha.*eta - 2.8216e-1.*eta.^2;
                     
Cm.eta    = @(alpha, eta)  1.3614e-2           + 1.6470e-1.*alpha      - 1.9680e0 .*eta     ...
                         - 4.1041e-1.*alpha.^2 + 1.3648e0 .*alpha.*eta - 4.1479e-1.*eta.^2  ...
                         + 1.8580e-1.*alpha.^3                         + 1.3564e0 .*eta.^3  ...
                         - 1.4399e-1.*alpha.^2.*eta             + 9.4833e-1.*alpha.*eta.^2;
                     
%% Continous functions in alpha, qhat
% with respect to angle of attack and normalized pitch rate

% UNUSED
Clift.q = @(alpha, qhat) 1.6871e-02 - 3.4090e-02.*alpha + 2.1474e+03.*qhat ...
                       + 2.4247e-02.*alpha.^2 + 3.9198e+02.*alpha.*qhat - 4.6683e+06.*qhat.^2 ...
                       - 3.8156e-02.*alpha.^3 - 1.2371e+06.*qhat.^3 ...
                       - 1.5219e+03.*alpha.^2.*qhat + 5.9144e+06.*alpha.*qhat.^2;

Clift.q1 = @(alpha, qhat) 5.4119e-03 - 8.1655e-02.*alpha + 1.9039e+03.*qhat ...
                        + 2.1124e-01.*alpha.^2 + 1.8401e+03.*alpha.*qhat - 3.9070e+06.*qhat.^2 ...
                        + 3.0691e-01.*alpha.^3 - 2.2043e+06.*qhat.^3 ...
                        + 3.4895e+03.*alpha.^2.*qhat + 1.4013e+07.*alpha.*qhat.^2;

Clift.q2 = @(alpha, qhat) -1.3166e-02 + 2.1415e-01.*alpha + 5.5333e+03.*qhat ...
                         - 6.4394e-01.*alpha.^2 - 1.2278e+04.*alpha.*qhat + 2.5583e+06.*qhat.^2 ...
                         + 5.0222e-01.*alpha.^3 - 2.2043e+06.*qhat.^3 ...
                         + 9.0580e+03.*alpha.^2.*qhat - 8.2557e+06.*alpha.*qhat.^2;

% UNUSED
Cdrag.q = @(alpha, qhat) -6.6492e-03 + 2.2279e-02.*alpha - 6.6030e+01.*qhat ...
                        - 2.7513e-02.*alpha.^2 + 1.8213e+03.*alpha.*qhat + 9.5951e+05.*qhat.^2 ...
                        + 1.6485e-02.*alpha.^3 - 7.7460e+08.*qhat.^3 ...
                        + 2.9896e+02.*alpha.^2.*qhat - 6.3090e+06.*alpha.*qhat.^2;

Cdrag.q1 = @(alpha, qhat) -5.4751e-03 + 2.7565e-02.*alpha - 4.8630e+01.*qhat ...
                         - 4.6392e-02.*alpha.^2 + 1.7454e+03.*alpha.*qhat + 7.6818e+05.*qhat.^2 ...
                         - 2.3272e-05.*alpha.^3 - 7.7460e+08.*qhat.^3 ...
                         - 3.0017e+00.*alpha.^2.*qhat - 8.3446e+06.*alpha.*qhat.^2;

Cdrag.q2 = @(alpha, qhat) -8.7317e-02 + 5.4709e-01.*alpha - 2.0923e+02.*qhat ...
                         - 1.0410e+00.*alpha.^2 + 2.3283e+03.*alpha.*qhat - 8.5680e+05.*qhat.^2 ...
                         + 6.0639e-01.*alpha.^3 - 7.7460e+08.*qhat.^3 ...
                         - 1.0538e+02.*alpha.^2.*qhat - 2.7475e+06.*alpha.*qhat.^2;

% UNUSED
Cm.q    = @(alpha, qhat) 1.5881e-02 + 1.8892e-02.*alpha - 2.3348e+03.*qhat ...
                       - 8.0728e-02.*alpha.^2 - 1.8491e+02.*alpha.*qhat + 1.2520e+04.*qhat.^2;
                   
Cm.q1   = @(alpha, qhat) -3.2918e-03 + 7.8943e-02.*alpha - 2.3954e+03.*qhat ...
                        + 2.0435e-01.*alpha.^2 - 8.2952e+02.*alpha.*qhat + 7.5959e+03.*qhat.^2;
                    
Cm.q2   = @(alpha, qhat) 8.9254e-02 - 1.9905e-01.*alpha - 2.9100e+03.*qhat ...
                       + 6.3915e-02.*alpha.^2 + 9.4289e+02.*alpha.*qhat + 7.5959e+03.*qhat.^2;


% Cm_q    = @(alpha, qhat) 2.3310e-04 + 4.3629e-02.*alpha - 2.4526e+03.*qhat ...
%                        + 5.8901e-03.*alpha.^2 - 6.1298e+02.*alpha.*qhat + 1.2415e+06.*qhat.^2 ...
%                        - 1.5478e-01.*alpha.^3 - 2.9803e+09.*qhat.^3 ...
%                        + 1.3144e+03.*alpha.^2.*qhat + 1.5961e+06.*alpha.*qhat.^2;

Cm.q1   = @(alpha, qhat) -2.1162e-02 - 3.4754e-02.*alpha - 2.3734e+03.*qhat ...
                        + 4.9746e-01.*alpha.^2 - 2.8569e+02.*alpha.*qhat + 1.7783e+06.*qhat.^2 ...
                        + 9.1725e-01.*alpha.^3 - 2.9803e+09.*qhat.^3 ...
                        + 1.3062e+03.*alpha.^2.*qhat + 7.3074e+06.*alpha.*qhat.^2;

Cm.q2   = @(alpha, qhat) 1.8752e-01 - 8.0810e-01.*alpha - 6.9740e+02.*qhat ...
                       + 1.1081e+00.*alpha.^2 - 8.0156e+03.*alpha.*qhat + 6.3375e+06.*qhat.^2 ...
                       - 5.3863e-01.*alpha.^3 - 2.9803e+09.*qhat.^3 ...
                       + 8.0472e+03.*alpha.^2.*qhat - 8.3964e+06.*alpha.*qhat.^2;

                   
%% Piece-wise defined functions
% with respect to angle of attack, elevator deflection,
% and normalized pitch rate
C1.lift = @(alpha, eta, qhat) Clift.alpha1(alpha) + Clift.eta(alpha, eta) + Clift.q1(alpha, qhat);
C2.lift = @(alpha, eta, qhat) Clift.alpha2(alpha) + Clift.eta(alpha, eta) + Clift.q2(alpha, qhat);

C1.drag = @(alpha, eta, qhat) Cdrag.alpha1(alpha) + Cdrag.eta(alpha, eta) + Cdrag.q1(alpha, qhat);
C2.drag = @(alpha, eta, qhat) Cdrag.alpha2(alpha) + Cdrag.eta(alpha, eta) + Cdrag.q2(alpha, qhat);

C1.m   = @(alpha, eta, qhat) Cm.alpha1(alpha) + Cm.eta(alpha, eta) + Cm.q1(alpha, qhat);
C2.m   = @(alpha, eta, qhat) Cm.alpha2(alpha) + Cm.eta(alpha, eta) + Cm.q2(alpha, qhat);


C.lift = @(alpha, eta, qhat) ift(alpha <= alpha0, C1.lift(alpha, eta, qhat), C2.lift(alpha, eta, qhat));
C.drag = @(alpha, eta, qhat) ift(alpha <= alpha0, C1.drag(alpha, eta, qhat), C2.drag(alpha, eta, qhat));

C.m    = @(alpha, eta, qhat) ift(alpha <= alpha0, C1.m(alpha, eta, qhat), C2.m(alpha, eta, qhat));


%% Partial derivatives
% with respect to elevator deflection

% dC*/deta = d(C*_alpha)/deta + d(C*.eta)/deta = d(C*.eta)/deta
% dClift.deta = @(alpha, eta, ~)  4.2230e-1 - 3.1187e-1.*alpha + 2*6.3358e-2.*eta;
dC.lift.deta = @(alpha, eta, ~)  5.2091e-1 - 4.1599e-1.*alpha + 2*8.8707e-2.*eta 	...
             + 3.8677e-2.*alpha.^2 - 2*2.9293e-1.*alpha.*eta - 3*4.7866e-1.*eta.^2;
dC.drag.deta = @(alpha, eta, ~)  3.4035e-2 + 1.3701e-1.*alpha + 2*5.9390e-2.*eta;
% dCm.deta    = @(alpha, eta, ~) -1.6695e0  + 1.0020e0 .*alpha - 2*2.8216e-1.*eta;
dC.m.deta    = @(alpha, eta, ~) -1.9680e0  + 1.3648e0 .*alpha - 2*4.1479e-1.*eta 	...
             - 1.4399e-1.*alpha.^2 + 2*9.4833e-1.*alpha.*eta + 3*1.3564e0 .*eta.^2;


% with respect to normalized pitch rate
% dC*i/dqhat = d(C*i_qhat)/dqhat
dClift1.dqhat = @(alpha, ~, qhat) 1.9039e+03 + 1.8401e+03.*alpha - 2*3.9070e+06.*qhat ...
              + 3.4895e+03.*alpha.^2 + 2*1.4013e+07.*alpha.*qhat - 3*2.2043e+06.*qhat.^2;
dClift2.dqhat = @(alpha, ~, qhat) 5.5333e+03 - 1.2278e+04.*alpha + 2*2.5583e+06.*qhat ...
              + 9.0580e+03.*alpha.^2 - 2*8.2557e+06.*alpha.*qhat - 3*2.2043e+06.*qhat.^2;

dCdrag1.dqhat = @(alpha, ~, qhat) -4.8630e+01 + 1.7454e+03.*alpha + 2*7.6818e+05.*qhat ...
               - 3.0017e+00.*alpha.^2 - 2*8.3446e+06.*alpha.*qhat - 3*7.7460e+08.*qhat.^2;
dCdrag2.dqhat = @(alpha, ~, qhat) -2.0923e+02 + 2.3283e+03.*alpha - 2*8.5680e+05.*qhat ...
               - 1.0538e+02.*alpha.^2 - 2*2.7475e+06.*alpha.*qhat - 3*7.7460e+08.*qhat.^2;

dCm1.dqhat    = @(alpha, ~, qhat) -2.3734e+03 - 2.8569e+02.*alpha + 2*1.7783e+06.*qhat ...
               + 1.3062e+03.*alpha.^2 + 2*7.3074e+06.*alpha.*qhat - 3*2.9803e+09.*qhat.^2;
dCm2.dqhat    = @(alpha, ~, qhat) -6.9740e+02.*qhat - 8.0156e+03.*alpha + 2*6.3375e+06.*qhat ...
                     + 8.0472e+03.*alpha.^2 - 2*8.3964e+06.*alpha.*qhat - 3*2.9803e+09.*qhat.^2;
          
          
dC.lift.dqhat = @(alpha, eta, qhat) ift(alpha <= alpha0, dClift1.dqhat(alpha, eta, qhat), dClift2.dqhat(alpha, eta, qhat));
dC.drag.dqhat = @(alpha, eta, qhat) ift(alpha <= alpha0, dCdrag1.dqhat(alpha, eta, qhat), dCdrag2.dqhat(alpha, eta, qhat));
dC.m.dqhat    = @(alpha, eta, qhat) ift(alpha <= alpha0, dCm1.dqhat(alpha, eta, qhat), dCm2.dqhat(alpha, eta, qhat));

         
% with respect to angle of attack
% dC*i/dalpha = d(C*i_alpha)/dalpha + d(C*i_qhat)/dalpha + d(C*.eta)/dalpha
dClift1.dalpha = @(alpha, eta, qhat)           ... = d(Clift.alpha1)/dalpha
                                  5.2336e0            + 2*1.9847e0 .*alpha      - 3*3.0060e1 .*alpha.^2   ...
                                               ...     + d(Clift.q1)/dalpha
                              -   8.1655e-2           + 2*2.1124e-1.*alpha       + 1.8401e+3.*qhat        ...
                              + 3*3.0691e-1.*alpha.^2 + 2*3.4895e+3.*alpha.*qhat + 1.4013e+7.*qhat.^2     ...
                                               ...    + d(Clift.eta)/dalpha
                              +   3.2851e-3           - 2*7.2395e-2.*alpha      -   4.1599e-1.*eta        ...
                              + 3*5.0690e-2.*alpha.^2 + 2*3.8677e-2.*alpha.*eta -   2.9293e-1.*eta  .^2;

dClift2.dalpha = @(alpha, eta, qhat)    ...
                                  3.2508e0            - 2*3.2349e0 .*alpha      + 3*7.0801e-1.*alpha.^2   ...
                                        ...
                              +   2.1415e-1           - 2*6.4394e-1.*alpha       - 1.2278e+04.*qhat       ...
                              + 3*5.0222e-1.*alpha.^2 + 2*9.0580e+3.*alpha.*qhat - 8.2557e+06.*qhat.^2    ...
                                        ...
                              +   3.2851e-3           - 2*7.2395e-2.*alpha      -   4.1599e-1.*eta        ...
                              + 3*5.0690e-2.*alpha.^2 + 2*3.8677e-2.*alpha.*eta -   2.9293e-1.*eta  .^2;
                       
dCdrag1.dalpha = @(alpha, eta, qhat)    ...
                                 -1.1014e-1           + 2*2.3635e0 .*alpha      + 3*3.9476e0 .*alpha.^2   ...
                                        ...
                              +   2.7565e-2           - 2*4.6392e-2.*alpha       +   1.7454e+3.*qhat      ...
                              - 3*2.3272e-5.*alpha.^2 - 2*3.0017e0 .*alpha.*qhat - 8.3446e+06.*qhat.^2    ...
                                        ...
                              +   3.1273e-2           - 2*6.3981e-2.*alpha      +   1.3701e-1.*eta;
                          
dCdrag2.dalpha = @(alpha, eta, qhat)    ...
                                  1.4271e0            + 2*7.1896e-1.*alpha      - 3*4.8614e-1.*alpha.^2   ...
                                        ...
                              +   5.4709e-1           - 2*1.0410e0 .*alpha       + 2.3283e+3.*qhat        ...
                              + 3*6.0639e-1.*alpha.^2 - 2*1.0538e+2.*alpha.*qhat - 2.7475e+6.*qhat.^2     ...
                                        ...
                              +   3.1273e-2           - 2*6.3981e-2.*alpha      +   1.3701e-1.*eta;

dCm1.dalpha    = @(alpha, eta, qhat)    ...
                                 -1.4748e0            + 2*8.4752e0 .*alpha       - 3*3.2729e1 .*alpha.^2  ...
                                        ...
                              -   3.4754e-2           + 2*4.9746e-1.*alpha       -   2.8569e+2.*qhat      ...
                              + 3*9.1725e-1.*alpha.^2 + 2*1.3062e+3.*alpha.*qhat +   7.3074e+6.*qhat.^2   ...
                                        ...
                               +   1.6470e-1           - 2*4.1041e-1.*alpha      +   1.3648e0 .*eta       ...
                               + 3*1.8580e-1.*alpha.^2 - 2*1.4399e-1.*alpha.*eta +   9.4833e-1.*eta  .^2;
                           
dCm2.dalpha    = @(alpha, eta, qhat)    ...
                                  -2.4557e0            + 2*2.3038e0 .*alpha      -  3*9.4998e-1.*alpha.^2 ...
                                        ...
                               -   8.0810e-1           + 2*1.1081e0 .*alpha       -   8.0156e+03.*qhat    ...
                               - 3*5.3863e-1.*alpha.^2 + 2*8.0472e+3.*alpha.*qhat -   8.3964e+06.*qhat.^2 ...
                                        ...
                               +   1.6470e-1           - 2*4.1041e-1.*alpha      +   1.3648e0 .*eta       ...
                               + 3*1.8580e-1.*alpha.^2 - 2*1.4399e-1.*alpha.*eta +   9.4833e-1.*eta  .^2;

dC.lift.dalpha = @(alpha, eta, qhat) ift(alpha <= alpha0, dClift1.dalpha(alpha, eta, qhat), dClift2.dalpha(alpha, eta, qhat));
dC.drag.dalpha = @(alpha, eta, qhat) ift(alpha <= alpha0, dCdrag1.dalpha(alpha, eta, qhat), dCdrag2.dalpha(alpha, eta, qhat));
dC.m.dalpha    = @(alpha, eta, qhat) ift(alpha <= alpha0, dCm1.dalpha(alpha, eta, qhat), dCm2.dalpha(alpha, eta, qhat));

end